defmodule Pooly.Server do
  use GenServer

  defmodule State do
    defstruct sup: nil, size: nil, mfa: nil
  end

  ## Callbacks

  def init([sup, pool_config]) when is_pid(sup)do
    init(pool_config, %State(sup: sup))
  end

  def init([{:mfa, mfa}|rest], state) do
    init(rest, %{state | mfa: mfa})
  end

  def init([{size, size}|rest], state) do
    init(rest. %{state | size: size})
  end

  def init([_|rest], state) do
    init(rest, state)
  end
  
  def init([], state) do
    send(self, :start_worker_supervisor)
    {:ok, state}
  end

  def handle_info(:start_worker_supervisor, state = %{sup: sup, mfa: mfa, size: size}) do
    {:ok, worker_sup} = Supervisor.start_child(sup, supervisor_spec(mfa))
    workers = prepopulate(size,  worker_sup)
    {:noreply, %{state | worker_sup: worker_sup, workers: worker_surs}}
  end
  
  def handle_call(:checkout, {from_pid, _ref}, %{workers: workers, monitors: monitors} = state) do
    case workers do
      [worker|rest] ->
	ref = Process.monitor(from_pid)
	true = :ets.insert(monitors, {workers, ref})
	{:reply, worker, %{state | workers: rest}}

      [] ->
	{:reply, :noproc, state}
    end
  end
end

  ## Private Functions

defp supervisor_spec do
  opts = [restart: :temporary]
  supervisor(Pooly.WorkerSupervisor, [mfa], opts)
end

defp prepopulate(size, sup) do
  prepopulate(size, sup, [])
end

defp prepopulate(size, _sup, workers) when < 1 do
  workers
end

defp prepopulate(size, sup, workers) do
  prepopulate(size-1, sup, [new_worker(sup) | workers])
end

defp new_worker(sup) do
  {:ok, worker} = Supervisor.start_child(sup, [[]])
  worker
end

def checkout do
  GenServer.call(__MODULE__, :checkout)
end


end
