name: ReadArgs
version: 1.2.2
id: ReadArgs-1.2.2-3303d9383ae25771cfdc5612211d218c
key: ReadA_86uKgfhTW6m0r0OmXHuVzt
license: BSD3
maintainer: noah.easterly@gmail.com
homepage: http://github.com/rampion/ReadArgs
synopsis: Simple command line argument parsing
description:
    ReadArgs provides the @readArgs@ IO action, which lets you tell the compiler
    to parse the command line arguments to fit the type signature you give.
    .
    For example @(a :: Int, b :: String, c :: Float) <- readArgs@ would
    parse the first runtime argument as an @Int@, the second as a @String@ (no
    quotes required) and the third as a @Float@.
    .
    If the runtime arguments are incompatible with the type signature,
    then a simple usage statement is given of the types needed.
    .
    Continuing the previous example, if it was used in a
    program named @Example@, the error message for the above
    action would be:
    .
    @
    usage: Example Int String Float
    @
    .
    Any type that has both @Typeable@ and @Read@ instances
    can be used. @Char@, @String@, and @Text@ are handled specially so that
    command line arguments for both do not require quotes (as their
    @Read@ instances do). A special instance is provided for @FilePath@ so
    that no constructor or quotes are required.
    .
    @readArgs@ also supports optional arguments and variadic arguments.
    Optional arguments are specified using @Maybe@, and variadic arguments
    using a list.  @(a :: Int, b :: Maybe String, c :: [Float]) <- readArgs@
    would successfully parse any of the following sets of command line arguments:
    .
    @
    Example 1
    Example 1 2 3 4
    Example 1 foo
    Example 1 foo 2 3 4
    @
    .
    But not
    .
    @
    Example
    Example foo
    Example 1.0
    @
    .
    Usage statements for optional and variadic arguments use command-line
    parlance:
    .
    @
    usage: Example Int [String] [Float..]
    @
    .
    Note that both optional and variadic parsers are greedy by default
    (so @Example 1 2 3 4@ was parsed as @(1, "2", [3.0,4.0])@.  They
    may both be made non-greedy through use of the @NonGreedy@ constructor:
    .
    @
    ( a :: Int
    , NonGreedy b :: NonGreedy Maybe String
    , NonGreedy c :: NonGreedy [] Float
    ) <- readArgs
    @
category: Command Line
author: Noah Luck Easterly
exposed: True
exposed-modules:
    ReadArgs
trusted: False
import-dirs: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/ReadArgs-1.2.2-86uKgfhTW6m0r0OmXHuVzt
library-dirs: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/ReadArgs-1.2.2-86uKgfhTW6m0r0OmXHuVzt
data-dir: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/share/x86_64-linux-ghc-7.10.3/ReadArgs-1.2.2
hs-libraries: HSReadArgs-1.2.2-86uKgfhTW6m0r0OmXHuVzt
depends:
    base-4.8.2.0-0d6d1084fbc041e1cded9228e80e264d
    system-filepath-0.4.13.4-c3035c0249092aa39f20a28d2190a818
    text-1.2.1.3-37339a0eb1fbe798089eff2a5a31be3a
haddock-interfaces: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/ReadArgs-1.2.2/html/ReadArgs.haddock
haddock-html: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/ReadArgs-1.2.2/html
