name: psqueues
version: 0.2.2.1
id: psqueues-0.2.2.1-40e31f0c8f434ce2cd82792e82c3945f
key: psque_J9nzAihfPu45Yj2BMqZZ2E
license: BSD3
maintainer: Jasper Van der Jeugt <jaspervdj@gmail.com>
synopsis: Pure priority search queues
description:
    The psqueues package provides
    <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
    three different flavors.
    .
    * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
    deletion and lookup. This implementation is based on Ralf Hinze's
    <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
    Hence, it is similar to the
    <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
    considerably faster and provides a slightly different API.
    .
    * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
    to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
    (like @IntMap@) with an additional min-heap property.
    .
    * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
    simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
    hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
    this implementation is comparable to that of @IntPSQ@, but it is more widely
    applicable since the keys are not restricted to @Int@, but rather to any
    @Hashable@ datatype.
    .
    Each of the three implementations provides the same API, so they can be used
    interchangeably. The benchmarks show how they perform relative to one
    another, and also compared to the other Priority Search Queue
    implementations on Hackage:
    <http://hackage.haskell.org/package/PSQueue PSQueue>
    and
    <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
    .
    <<http://i.imgur.com/KmbDKR6.png>>
    .
    <<http://i.imgur.com/ClT181D.png>>
    .
    Typical applications of Priority Search Queues include:
    .
    * Caches, and more specifically LRU Caches;
    .
    * Schedulers;
    .
    * Pathfinding algorithms, such as Dijkstra's and A*.
category: Data Structures
exposed: True
exposed-modules:
    Data.HashPSQ Data.IntPSQ Data.OrdPSQ
hidden-modules: Data.BitUtil Data.HashPSQ.Internal
                Data.IntPSQ.Internal Data.OrdPSQ.Internal
trusted: False
import-dirs: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/psqueues-0.2.2.1-J9nzAihfPu45Yj2BMqZZ2E
library-dirs: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.3/psqueues-0.2.2.1-J9nzAihfPu45Yj2BMqZZ2E
data-dir: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/share/x86_64-linux-ghc-7.10.3/psqueues-0.2.2.1
hs-libraries: HSpsqueues-0.2.2.1-J9nzAihfPu45Yj2BMqZZ2E
depends:
    base-4.8.2.0-0d6d1084fbc041e1cded9228e80e264d
    deepseq-1.4.1.1-614b63b36dd6e29d2b35afff57c25311
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.3.3-eec7a510a757914e64af4faad5258f67
haddock-interfaces: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/psqueues-0.2.2.1/html/psqueues.haddock
haddock-html: /home/human/Workspace/Haskell/myBlog/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.3/psqueues-0.2.2.1/html
